
<script src="https://d3js.org/d3.v4.min.js"></script>


<script type="text/javascript">

 const ELEM_SIZE = 30;
 const ELEM_DIST = 3*ELEM_SIZE;
 const LINE_LEN = ELEM_DIST - 2*ELEM_SIZE;
 const ELEM_ALPHA = 0.8;

 const SVG_WIDTH = 500;
 const SVG_HEIGHT = 500;

 const EMPTY_ID = -1;

 const ACTIVE_CLASS = "context-menu_active";
 const SELECTED_CIRCLE_CLASS = "selected_circle";

 const EDGE = "edge";

 const EMPTY_VERTEX = {
                 xpos: null,
                 ypos: null,
                 gridx: null,
                 gridy: null,
                 vegetableId: EMPTY_ID,
                 edges: {}
             };
 
 function initGarden(xdim, ydim) {
     
     function toIndex (ci, cj) {
         return ci*xdim + cj;
     }

     var g = {};
     g.vertices = [];
     g.toIndex = toIndex;

     g.getVertex = function(x, y) {
		 if(x >= xdim || y >= ydim) {
			return EMPTY_VERTEX;
		 }		 
         return this.vertices[this.toIndex(x,y)];
     }

     g.getEdges = function(vertex) {
         return Object.values(vertex.edges).concat([
             this.getVertex(vertex.gridx, vertex.gridy + 1).edges.up,
             this.getVertex(vertex.gridx+1, vertex.gridy).edges.left
         ]).filter((x) => x != null);
     }

     g.getAffinity = function (v1, v2) {
         if(v1.vegetableId >= 0 && v2.vegetableId >= 0)
             return vegetables[v1.vegetableId].relationships[v2.vegetableId];
         else return 0;
     }
     
     for(var i = 0; i < xdim; i++) {
         for(var j = 0; j < ydim; j++) {
             var cindex = toIndex(i, j);
             var tmp = {
                 xpos: ELEM_SIZE + i * ELEM_DIST,
                 ypos: ELEM_SIZE + j * ELEM_DIST,
                 gridx: i,
                 gridy: j,
                 vegetableId: EMPTY_ID,
                 edges: {}
             };

             if(i > 0) {
                 var e = {
                     startVertexId: cindex,
                     endVertexId: toIndex(i - 1, j),
                     startx: tmp.xpos - ELEM_SIZE,
                     endx: tmp.xpos - ELEM_SIZE - LINE_LEN,
                     starty: tmp.ypos,
                     endy: tmp.ypos,
                     affinity: 0
                 };
                 tmp.edges['left'] = e;
             }

             if(j > 0) {
                 var e = {
                     startVertexId: cindex,
                     endVertexId: toIndex(i, j-1),
                     startx: tmp.xpos,
                     endx: tmp.xpos,
                     starty: tmp.ypos - ELEM_SIZE,
                     endy: tmp.ypos - ELEM_SIZE - LINE_LEN,
                     affinity: 0
                 }
                 tmp.edges['up'] = e;
             }

             g.vertices.push(tmp);
         }
     }
     return g;
 }

 function viz() {
     var gardenGrid = d3.select("#gardenGrid");
     var mainElem = gardenGrid.selectAll("g").data(garden.vertices).enter();
     
     var elemEnter = mainElem.append("g");
	 
     elemEnter.append("rect")
              .attr("x", (d) => d.xpos - ELEM_SIZE)
              .attr("y", (d) => d.ypos - ELEM_SIZE)
              .attr("gridx", (d) => d.gridx)
              .attr("gridy", (d) => d.gridy)
              .attr("targetid", (d) => d.vegetableId)
              .attr("width", ELEM_SIZE*2)
			  .attr("height", ELEM_SIZE*2)
              .classed("unbound_circle", true);

     // TODO - Text sizing
     elemEnter.append("foreignObject")
              .attr("x", (d) => d.xpos - ELEM_SIZE)
              .attr("y", (d) => d.ypos - ELEM_SIZE)
			  .attr("width", ELEM_SIZE*2)
			  .attr("height", ELEM_SIZE*2)
              .classed("tName", true)
			  .insert("xhtml:div")
			  .text((d) => d.vegetableId < 0 ? "" : vegetables[d.vegetableId].name);

     elemEnter.selectAll("line")
              .data((d) => Object.values(d.edges))
              .enter().append("line")
              .attr('x1', (d) => d.startx)
              .attr('x2', (d) => d.endx)
              .attr('y1', (d) => d.starty)
              .attr('y2', (d) => d.endy);

     gardenGrid.selectAll("foreignObject").transition().select("div")
               .text((d) => d.vegetableId < 0 ? "" : vegetables[d.vegetableId].name);

     gardenGrid.selectAll("line").transition()
               .style('stroke', function(d) {
                   if(d.affinity == 0) return 'black';
                   else if(d.affinity > 0) return 'green';
                   else return 'red';
               })
               .style('stroke-width', function(d) {
                   if(d.affinity == 0) return '1';
                   else if(d.affinity > 0) return '6';
                   else return '6';                
               });
 }

 var vegetables = {{{tojson vegetables}}};
 var garden = initGarden(4, 4);

 var additionMode = false;
 var inEditC = null;
 var inEditG = null;
 
 $(function() {
     var menu = $("#vegContextMenu");

	 function hideContextMenu() {
		if(additionMode) {
			 additionMode = false;
			 menu.removeClass(ACTIVE_CLASS);
			 inEditC.removeClass(SELECTED_CIRCLE_CLASS);
			 inEditC = null;
		} 
	 }	 
	 
     $("#gardenGrid").on('contextmenu', 'rect', function(e) {
         if(!additionMode) {
             additionMode = true;
             menu.addClass(ACTIVE_CLASS);
         } else {
             inEditC.removeClass(SELECTED_CIRCLE_CLASS);
         }
         menu.offset({left: e.clientX, top: e.clientY});
         inEditC = $(this);
         inEditC.addClass(SELECTED_CIRCLE_CLASS);
         inEditG = garden.getVertex(parseInt(inEditC.attr('gridx')), parseInt(inEditC.attr('gridy')));        
         return false;
      });
	  
     $("#gardenGrid").on('click', function(e) {
         hideContextMenu();
         return false;
     });

     $("#vegContextMenu").on('mouseenter', '.context-menu_item', function(e) {
		 var edges = garden.getEdges(inEditG);
         var v = vegetables[$(this).attr('targetid')];
		 var pVegetableId = inEditG.vegetableId;
		 inEditG.vegetableId = $(this).attr('targetid');
         for(var i=0; i < edges.length; i++) {
             var e = edges[i];
			 e.affinity = garden.getAffinity(garden.vertices[e.startVertexId], garden.vertices[e.endVertexId]);
         }
         viz();
		 // Restore previous state
		 inEditG.vegetableId = pVegetableId;         
		 for(var i=0; i < edges.length; i++) {
             var e = edges[i];
			 e.affinity = garden.getAffinity(garden.vertices[e.startVertexId], garden.vertices[e.endVertexId]);
         }		 
     });
	 
	 $("#vegContextMenu").on('mouseleave', '.context-menu_item', function(e) {
		viz();
	 });

     $("#vegContextMenu").on('mouseexit', '.context-menu_item', function(e) {
         var v = vegetables[$(this).attr('targetid')];
     });

     $(".context-menu_item").on('click', function(e) {
         inEditG.vegetableId = $(this).attr('targetid');            
         var edges = garden.getEdges(inEditG);
         for(var i=0; i < edges.length; i++) {
             var e = edges[i];
             e.affinity = garden.getAffinity(garden.vertices[e.startVertexId], garden.vertices[e.endVertexId]);
         }
         viz();
		 hideContextMenu();
     });

     $(".vfiltercb").on('change', function(e) {
		 var targetEl = "#cmi" + this.value;
		 $(targetEl).toggleClass("hidden");
     });
	 
	 $("#updateDims").on('click', function(e) {
		var xdim = parseInt($("#xinput").val());
		var ydim = parseInt($("#yinput").val());
		garden = initGarden(xdim, ydim);
		$("#gardenGrid").empty();
		viz();
	 });

     viz();	 

 });
</script>

<nav class="context-menu" id="vegContextMenu">
    <ul class="context-menu_items">
        {{#each vegetables}}
        <li class="context-menu_item hidden" targetid="{{@key}}" id="cmi{{@key}}">{{name}}</li>
        {{/each}}
    </ul>
</nav>

<div class="row h-100">
    <div class="col-md-4" id="subset_selector">
    	<ul class="vegfilter">
	  {{#each vegetables}}
	    <li><input type="checkbox" class="vfiltercb" value="{{@key}}" id="vf{{@key}}" /><label for="vf{{@key}}">{{name}}</label></li>
	  {{/each}}
	</ul>
    </div>
    <div class="col-md-8 h-100">
		<div>
			<span>Velikost vrta: <input type="text" id="xinput" value="4" /> x <input type="text" id="yinput" value="4" /> polj. <input type="button" value="Posodobi" id="updateDims" />
		</div>
		<div>&nbsp</div>
        <svg id="gardenGrid" width="100%" height="100%"/>            
    </div>
</div>
