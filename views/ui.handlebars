<script src="https://d3js.org/d3.v4.min.js"></script>
<script src="https://fastcdn.org/FileSaver.js/1.1.20151003/FileSaver.min.js"></script>

<script type="text/javascript">


 const ELEM_SIZE = 30;
 const ELEM_DIST = 3 * ELEM_SIZE;
 const LINE_LEN = ELEM_DIST - 2 * ELEM_SIZE;
 
 const X_OFFSET = 5;
 const Y_OFFSET = 5;

 const ACTIVE_CLASS = "context-menu_active";
 const SELECTED_CIRCLE_CLASS = "selected_circle";

 const EMPTY_VERTEX = {
     xpos: null,
     ypos: null,
     gridx: null,
     gridy: null,
     vegetableIds: [],
     edges: {},
     affinity: 0
 };

 Object.defineProperty(Array.prototype, 'toggle', {
     enumerable: false,
     value: function (x) {
         var i = this.indexOf(x);
         if (i >= 0) {
             this.splice(i, 1);
             return this;
         }
         else {
             this.push(x);
             return this;
         }
     }
 });

 function getPairs(l1, l2) {
     let pairsl = [];
     for (let i1 = 0; i1 < l1.length; i1++) {
         for (let i2 = 0; i2 < l2.length; i2++) {
             if (l1[i1] != l2[i2])
                 pairsl.push([l1[i1], l2[i2]]);
         }
     }
     return pairsl;
 };

 function getPairsFromSet(l1) {
     let pairsl = [];
     for (let i1 = 0; i1 < l1.length; i1++) {
         for (let i2 = i1 + 1; i2 < l1.length; i2++) {
             pairsl.push([l1[i1], l1[i2]]);
         }
     }
     return pairsl;
 };

 // Fits the plant names into a square of size "dims"
 // Each plant must be in its own line (or spread over multiple if it is too long)
 function fitPlants(d) {
     if(d.vegetableIds.length == 0) {
         return;
     }

     var splitPlantNames = d.vegetableIds.map((x) => vegetables[x].name.split(/\s+/));
     
     var getLongestWord = (x, y) => x.length > y.length ? x : y;
     var longestWord = splitPlantNames.map((x) => x.reduce(getLongestWord)).reduce(getLongestWord)
     var minrows = splitPlantNames.length;

     var scaleFactor = 1;

     var textElement = d3.select(this);
     var textElement = textElement.text("");

     var tmp = textElement.append("tspan").style("font-size", scaleFactor + "em").text(longestWord);
     while(tmp.node().getComputedTextLength() > 2*ELEM_SIZE - 10) {
         scaleFactor = scaleFactor - 0.1;
         tmp.style("font-size", scaleFactor + "em");
     }
     tmp.remove();        

     while(!fillTextBox(textElement, splitPlantNames, scaleFactor)) {
         scaleFactor = scaleFactor - 0.1;
     }
 }

 /**
    Fills the textElement with splitPlantNames using fsize (in em) as style.
    Auxiliary method, returns true if the text fits and false otherwise.
  */
 function fillTextBox(textElement, splitPlantNames, fsize) {
     var lnum = 1;
     var sy = parseFloat(textElement.attr("y")) + 5;
     var sx = parseFloat(textElement.attr("x")) + 5;

     textElement.selectAll("tspan").remove();

     for(i in splitPlantNames) {
         var currentPlantName = splitPlantNames[i];
         var ctspan = textElement.append("tspan").attr("x", sx).attr("y", sy).attr("dy", lnum+"em").style("font-size", fsize + "em");
         var currentLine = [];
         for(j in currentPlantName) {
             var word = currentPlantName[j];                
             ctspan.text(currentLine.concat([word]).join(" "));
             if(ctspan.node().getComputedTextLength() <= 2*ELEM_SIZE - 10) {
                 currentLine.push(word);
             }
             else {
                 ctspan.text(currentLine.join(" "));
                 lnum = lnum + 1;
                 currentLine = [word];
                 ctspan = textElement.append("tspan").attr("x", sx).attr("y", sy).attr("dy", lnum+"em").style("font-size", fsize + "em").text(currentLine.join(" "));
                 
             }                
         }
         lnum += 1;
     }

     return textElement.node().getBBox().height <= 2 * ELEM_SIZE - 10;
 }

 class Garden {

     constructor(xdim, ydim) {
         this.vertices = [];
         this.xdim = xdim;
         this.ydim = ydim;

         this.initGrid();
     }

     toIndex(ci, cj) {
         return ci * this.ydim + cj;
     }

     getVertex(x, y) {
         if (x >= this.xdim || y >= this.ydim) {
             return EMPTY_VERTEX;
         }
         return this.vertices[this.toIndex(x, y)];
     }

     getEdges(vertex) {
         return Object.values(vertex.edges).concat([
             this.getVertex(vertex.gridx, vertex.gridy + 1).edges.up,
             this.getVertex(vertex.gridx + 1, vertex.gridy).edges.left
         ]).filter((x) => x != null);
     }

     getAffinity(v1, v2) { // Po novem vegetable Ids...
         function getRelationshipsForPairs(plist) {
             let affinities = [];
             for (let i = 0; i < plist.length; i++) {
                 affinities.push(vegetables[plist[i][0]].relationships[plist[i][1]] || 0);
             }
             return affinities;
         }

         let pairs = getPairs(v1.vegetableIds, v2.vegetableIds);
         if (pairs.length > 0) {
             return getRelationshipsForPairs(pairs).reduce((x, y) => Math.min(x, y));
         }
         else return 0;
     }

     initGrid() {
         for (let i = 0; i < this.xdim; i++) {
             for (let j = 0; j < this.ydim; j++) {
                 let cindex = this.toIndex(i, j);
                 let tmp = {
                     xpos: ELEM_SIZE + i * ELEM_DIST,
                     ypos: ELEM_SIZE + j * ELEM_DIST,
                     gridx: i,
                     gridy: j,
                     vegetableIds: [],
                     edges: {},
                     affinity: 0
                 };

                 if (i > 0) {
                     tmp.edges['left'] = {
                         startVertexId: cindex,
                         endVertexId: this.toIndex(i - 1, j),
                         startx: tmp.xpos - ELEM_SIZE,
                         endx: tmp.xpos - ELEM_SIZE - LINE_LEN,
                         starty: tmp.ypos,
                         endy: tmp.ypos,
                         affinity: 0
                     };
                 }

                 if (j > 0) {
                     tmp.edges['up'] = {
                         startVertexId: cindex,
                         endVertexId: this.toIndex(i, j - 1),
                         startx: tmp.xpos,
                         endx: tmp.xpos,
                         starty: tmp.ypos - ELEM_SIZE,
                         endy: tmp.ypos - ELEM_SIZE - LINE_LEN,
                         affinity: 0
                     }
                 }

                 this.vertices.push(tmp);
             }
         }        
     }

     static fromSave(data) {
         let garden = new Garden(data.xdim, data.ydim);
         garden.vertices = data.vertices; // Trenutno izgleda to kot odvečno delo, a cilj je, da se ne shranjuje celoten grid!
         return garden;
     }
 };

 function viz() {
     var gardenGrid = d3.select("#gardenGrid");
     var mainElem = gardenGrid.selectAll("g").data(garden.vertices).enter();

     var elemEnter = mainElem.append("g");

     elemEnter.append("rect")
              .attr("x", (d) => X_OFFSET + d.xpos - ELEM_SIZE)
              .attr("y", (d) => Y_OFFSET + d.ypos - ELEM_SIZE)
              .attr("gridx", (d) => d.gridx)
              .attr("gridy", (d) => d.gridy)
              .attr("targetid", (d) => d.vegetableIds)
              .attr("width", ELEM_SIZE * 2)
              .attr("height", ELEM_SIZE * 2)
              .classed("unbound_circle", true)
              .style('stroke', function (d) {
                  if (d.affinity == 0) return 'black';
                  else if (d.affinity > 0) return 'green';
                  else return 'red';
              })
              .style('stroke-width', function (d) {
                  if (d.affinity == 0) return '1';
                  else if (d.affinity > 0) return '3';
                  else return '3';
              });

     elemEnter.append("text")
              .attr("x", (d) => X_OFFSET + d.xpos - ELEM_SIZE)
              .attr("y", (d) => Y_OFFSET + d.ypos - ELEM_SIZE)
              .attr("width", ELEM_SIZE * 2)
              .attr("height", ELEM_SIZE * 2)
              .classed("tName", true)
              .text((d) => d.vegetableIds.length == 0 ? "" : d.vegetableIds.map((x) => vegetables[x].name).join("\n"));

     elemEnter.selectAll("line")
              .data((d) => Object.values(d.edges))
              .enter().append("line")
              .attr('x1', (d) => d.startx + X_OFFSET)
              .attr('x2', (d) => d.endx + X_OFFSET)
              .attr('y1', (d) => d.starty + Y_OFFSET)
              .attr('y2', (d) => d.endy + Y_OFFSET)
              .attr('startVertexId', (d) => d.startVertexId)
              .attr('endVertexId', (d) => d.endVertexId);

     gardenGrid.selectAll("text").transition()
               .each(fitPlants);

     gardenGrid.selectAll("rect").transition()
               .style('stroke', function (d) {
                   if (d.affinity == 0) return 'black';
                   else if (d.affinity > 0) return 'green';
                   else return 'red';
               })
               .style('stroke-width', function (d) {
                   if (d.affinity == 0) return '1';
                   else if (d.affinity > 0) return '3';
                   else return '6';
               });

     gardenGrid.selectAll("line").transition()
               .style('stroke', function (d) {
                   if (d.affinity == 0) return 'black';
                   else if (d.affinity > 0) return 'green';
                   else return 'red';
               })
               .style('stroke-width', function (d) {
                   if (d.affinity == 0) return '2';
                   else if (d.affinity > 0) return '6';
                   else return '6';
               });
 }

 var vegetables = {{{ tojson vegetables }}};
 var {garden, selections} = {{{ state }}} || { garden: new Garden(4, 4), selections: []};

 if({{{state}}} != false) {
     garden = Garden.fromSave(garden);
 }

 var additionMode = false;
 var inEditC = null;
 var inEditG = null;

 var selectedE = null;
 var selectedV = null;

 $(function () {
     var menu = $("#vegContextMenu");

     function hideContextMenu() {
         if (additionMode) {
             additionMode = false;
             menu.removeClass(ACTIVE_CLASS);
             inEditC.removeClass(SELECTED_CIRCLE_CLASS);
             inEditC = null;
         }
     }

     function updateMenuSelections() {
         $(".context-menu_item_selected").removeClass("context-menu_item_selected");

         inEditG.vegetableIds.forEach(function(selectedVegetableId) {
             $("#cmi" + selectedVegetableId).addClass('context-menu_item_selected');
         });
     }

     function updateEdgeDetails() {
         var sv = garden.vertices[parseInt(selectedE.attr('startVertexId'))];
         var ev = garden.vertices[parseInt(selectedE.attr('endVertexId'))];

         var pairs = getPairs(sv.vegetableIds, ev.vegetableIds);

         var t = "";

         for (var i = 0; i < pairs.length; i++) {
             var v1 = pairs[i][0];
             var v2 = pairs[i][1];
             var r1 = vegetables[v1];
             var r2 = vegetables[v2];
             var affinity = 0;

             if (r1.relationships[v2] > 0) {
                 affinity = 'pos';
             }
             else if (r1.relationships[v2] < 0) {
                 affinity = 'neg';
             }

             t = t + `<br /> <span class="${affinity}"> ${r2.name}  : ${r1.name} </span>`;
         }

         $("#connectionDetails").html(t);
     }

     function updateVertexDetails() {
         var v = garden.getVertex(parseInt(selectedV.attr('gridx')), parseInt(selectedV.attr('gridy')))
         var pairs = getPairsFromSet(v.vegetableIds);

         var t = "";

         for (var i = 0; i < pairs.length; i++) {
             var v1 = pairs[i][0];
             var v2 = pairs[i][1];
             var r1 = vegetables[v1];
             var r2 = vegetables[v2];
             var affinity = '';

             if (r1.relationships[v2] > 0) {
                 affinity = 'pos';
             }
             else if (r1.relationships[v2] < 0) {
                 affinity = 'neg';
             }

             t = t + `<br /> <span class="${affinity}"> ${r2.name}  : ${r1.name} </span>`;
         }

         $("#connectionDetails").html(t);
     }

     $("#gardenGrid").on('contextmenu', 'rect', function (e) {
         if (!additionMode) {
             additionMode = true;
             menu.addClass(ACTIVE_CLASS);
         } else {
             inEditC.removeClass(SELECTED_CIRCLE_CLASS);
         }

         inEditC = $(this);
         inEditC.addClass(SELECTED_CIRCLE_CLASS);
         inEditG = garden.getVertex(parseInt(inEditC.attr('gridx')), parseInt(inEditC.attr('gridy')));
         updateMenuSelections();

         menu.offset({ left: e.clientX, top: e.clientY });
         return false;
     });

     $("#gardenGrid").on('click', 'line', function (e) {
         selectedE = $(this);
         updateEdgeDetails();
     });

     $("#gardenGrid").on('click', 'rect', function (e) {
         selectedV = $(this);
         updateVertexDetails();
     });

     $("#gardenGrid").on('click', function (e) {
         hideContextMenu();
         return false;
     });

     $("#vegContextMenu").on('mouseenter', '.context-menu_item', function (e) {
         var edges = garden.getEdges(inEditG);
         var v = vegetables[$(this).attr('targetid')];
         var pAffinity = inEditG.affinity;
         var pVegetableIds = inEditG.vegetableIds.concat([]);
         inEditG.vegetableIds.toggle($(this).attr('targetid'));

         for (var i = 0; i < edges.length; i++) {
             var e = edges[i];
             e.affinity = garden.getAffinity(garden.vertices[e.startVertexId], garden.vertices[e.endVertexId]);
         }
         inEditG.affinity = garden.getAffinity(inEditG, inEditG);
         viz();

         // Restore previous state
         inEditG.vegetableIds = pVegetableIds;
         for (var i = 0; i < edges.length; i++) {
             var e = edges[i];
             e.affinity = garden.getAffinity(garden.vertices[e.startVertexId], garden.vertices[e.endVertexId]);
         }
         inEditG.affinity = pAffinity;
     });

     $("#vegContextMenu").on('mouseleave', '.context-menu_item', function (e) {
         viz();
     });

     $(".context-menu_item").on('click', function (e) {
         var tid = $(this).attr('targetid');
         inEditG.vegetableIds.toggle(tid);
         var edges = garden.getEdges(inEditG);
         for (var i = 0; i < edges.length; i++) {
             var e = edges[i];
             e.affinity = garden.getAffinity(garden.vertices[e.startVertexId], garden.vertices[e.endVertexId]);
         }
         inEditG.affinity = garden.getAffinity(inEditG, inEditG);
         viz();
         hideContextMenu();
     });

     $(".vfiltercb").on('change', function (e) {
         var targetEl = "#cmi" + this.value;
         $(targetEl).toggleClass("hidden");
     });

     $("#updateDims").on('click', function (e) {
         var xdim = parseInt($("#xinput").val());
         var ydim = parseInt($("#yinput").val());
         var garden2 = new Garden(xdim, ydim);
         
         garden2.vertices.map(function(newVertex, newVertexID) {
             let {gridx, gridy} = newVertex;
             if(gridx < garden.xdim && gridy < garden.ydim) {
                 let oldVertex = garden.getVertex(gridx, gridy);
                 newVertex.vegetableIds = oldVertex.vegetableIds;
                 newVertex.affinity = oldVertex.affinity;
                 Object.keys(oldVertex.edges).forEach((direction) => 
                     {
                         let e = oldVertex.edges[direction];
                         let ev = garden.vertices[e.endVertexId];
                         newVertex.edges[direction] = {
                             startVertexId: newVertexID,
                             endVertexId: garden2.toIndex(ev.gridx, ev.gridy),
                             startx: e.startx,
                             endx: e.endx,
                             starty: e.starty,
                             endy: e.endy,
                             affinity: e.affinity
                         };
                     }
                 );
             }
         });

         garden = garden2;

         $("#gardenGrid").empty();
         viz();
     });

     viz();

     // Navigation buttons
     $("#btn_saveGarden").on('click', function(e) {
         let fileName = prompt("Ime vrta");
         let selections = $(".vfiltercb").filter((_, x) => x.checked).map((_, x) => x.id).toArray();
         let content = new Blob([JSON.stringify({garden, selections})], {type: 'octet/stream'});
         saveAs(content, fileName + ".json");
     });

     $("#gardenUpload").on('change', function(e) {
	 $("#gardenUploadForm").submit();
     });

     $(".vfilterlbl").on('click', (x) => {
         x.stopPropagation();
     });

     // load state
     $(".vfiltercb").prop("checked", false);
     selections.forEach((x) => {
         $(`#${x}`).prop("checked", true);
         $(`#${x}`).change();
     });     
     
     $("#xinput").val(garden.xdim);
     $("#yinput").val(garden.ydim);     
 });
</script>

<nav class="context-menu blur" id="vegContextMenu">
    <ul class="context-menu_items">
        {{#each vegetables}}
        <li class="context-menu_item hidden" targetid="{{@key}}" id="cmi{{@key}}">{{name}}</li>
        {{/each}}
    </ul>
</nav>
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="collapse navbar-collapse" id="navbarText">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item dropdown">
                <label class="nav-link" id="rastlinedd" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">&#x1F33F;Rastline</label>
                <div class="dropdown-menu" id="subset_selector" aria-labelledby="rastlinedd">
                    {{#each vegetables}}
                        <label for="vf{{@key}}" class="dropdown-item vfilterlbl"><input type="checkbox" class="vfiltercb" value="{{@key}}" id="vf{{@key}}" /> {{name}}</label>
                    {{/each}}
                    <div class="dropdown-divider"></div>                    
                </div>                
            </li>
            <li class="nav-item">
                <label class="nav-link" id="btn_readGarden" for="gardenUpload">Preberi</label>
            </li>
            <li class="nav-item">
                <label class="nav-link" id="btn_saveGarden">Shrani</label>
            </li>
        </ul>
        <div class="form-inline">
            <span class="nav-link">Velikost: </span>
                <input type="text" id="xinput" value="4" size="3" /> x
                <input type="text" id="yinput" value="4" size="3" />
                <input class="btn" type="button" value="OK" id="updateDims" /> 
        </div>            
    </div>
</nav>
<div id="main" class="container h-100">
    <div class="row h-100">

        <div class="col-md-10 h-100">
            <div>&nbsp;</div>
            <svg id="gardenGrid" width="100%" height="100%" />
        </div>

        <div>
            Podrobnosti:        
            <div class="details" id="connectionDetails">
            </div>
        </div>
    </div>
</div>

<form method="POST" class="hidden" enctype="multipart/form-data" id="gardenUploadForm"> <input type="file" id="gardenUpload" name="gardenFile" class="hidden"/> </form>
